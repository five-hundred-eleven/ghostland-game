#version 460 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;

uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    vec3 vecDist = viewPos - FragPos;
    vec3 normDist = normalize(vecDist);

    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normDist;
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normDist;
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    float dist = distance(viewPos, FragPos);
    float att = 1.0 / (1.0 + 0.1*dist + 0.01*dist*dist);

    vec3 result = (ambient + diffuse + specular) * att * objectColor;
    FragColor = vec4(result, 1.0);
}
